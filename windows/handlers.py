import random
from time import sleep

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    CallbackQuery, Update

import states
from load_all import dp, bot
from states import Anketa


@dp.message_handler(commands=['start'])
async def start_bot(message : types.Message):
    first_name = message.from_user.first_name
    chat_id = message.from_user.id

    link = 'C:\\Users\\shake\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\python\\TelegramBot2\\sticker\\'

    sleep(1)
    sti = open(link + 'sticker.webp', 'rb')
    await bot.send_sticker(chat_id=chat_id, sticker=sti)

    start_keyboardMarkup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
            ],
            [
                KeyboardButton('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
                KeyboardButton('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ')
            ]
        ], resize_keyboard=True
    )
    await message.answer('<b>üöÄ –®–∞–ª–æ–º, {username} üöÄ</b>\n'
                         '–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ú–æ–π—à–∞</b>. –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –æ—Ç <a href="https://www.instagram.com/c0llege.hub/">'
                         'College hub</a>\n\n'
                         '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <i>–∫–æ–º–∞–Ω–¥—ã —Å–Ω–∏–∑—É</i> –∏–ª–∏ –∂–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å <i>–≤–º–µ—Å—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ãüòö</i>'
                         '\n\n'
                         '/start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n'
                         '/info - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
                         '/search - –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'.format(username = first_name), reply_markup=start_keyboardMarkup)

@dp.message_handler(commands=['info'])
async def info_bot(message : types.Message):
    random_number = random.randint(1, 15)
    link = 'C:\\Users\\shake\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\python\\TelegramBot\\stickers\\sticker'
    sti = open(link + str(random_number) + '.webp', 'rb')

    sleep(1)
    await bot.send_sticker(message.chat.id, sti)
    await message.answer(text='<b>–Å—É—É—É, —à–∞–ª–æ–º –µ—â—ë —Ä–∞–∑!üöÄ</b>\n\n'
                              '–ù–∞ —Å–≤—è–∑–∏ <b>–®–∞–∫–∏—Ä–∂–∞–Ω</b> - –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å College hub –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.\n\n'
                              '–ï—Å–ª–∏ –∂–µ–ª–∞–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ –ø–æ–≤–æ–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, '
                              '—Ç–æ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µüëáüèª\n\n'
                              '<b>–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:(–ø–∏—à–∏—Ç–µ –ª—É—á—à–µ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º)\n\n</b>'
                              'üì±–ò–Ω—Å—Ç–∞–≥—Ä–∞–º: https://www.instagram.com/shakeszka/\n\n'
                              'üì©–ü–æ—á—Ç–∞: shakeszka@gmail.com\n\n'
                              'üéÜ–¢–µ–ª–µ–≥—Ä–∞–º: @shakeszka\n\n'
                              'üíª–í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/shakeszka\n\n\n'
                              'üëáüèªüëáüèªüëáüèª\n'
                              '/start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', parse_mode='html')

@dp.message_handler(commands=['search'])
async def search(message : types.Message):
    sleep(1)
    sure_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton('–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω!', callback_data='yes')
            ],
            [
                InlineKeyboardButton('–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ªüòÖ', callback_data='no')
            ]
        ]
    )

    await message.answer('–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É:\n\n'
                         '‚úÖ –ü–æ–ª—É—á–∞–µ–º –í–∞—à—É –∑–∞—è–≤–∫—É -> ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å -> ‚úÖ –í—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ —Å—Ç–æ—Ä–∏—Å\n\n'
                         '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –¥—Ä—É–≥ –∞üòÅ?', reply_markup=sure_markup)

    @dp.callback_query_handler(text='no')
    async def stop_anketa(call: CallbackQuery):
        await start_bot(message)

    @dp.callback_query_handler(text='yes')
    async def start_anketa(call : CallbackQuery, state=None):
        await message.answer('–ù–∞—á–∏–Ω–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç....')

        last_messageid = call.message.message_id + 1 # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π message id

        chat_id = call.from_user.id # –ø–æ–ª—É—á–∞–µ–º id —é–∑–µ—Ä–∞

        user_name = call.from_user.username

        sleep(2)

        await bot.delete_message(chat_id=chat_id, message_id=last_messageid)

        await message.answer('<b>üîª–í–æ–ø—Ä–æ—Å ‚Ññ1</b>\n\n'
                             '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')

        await Anketa.Q0.set() #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        @dp.message_handler(state=Anketa.Q0)
        async def answer_q0(message: types.Message, state: FSMContext):
            answer = message.text # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ variable

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            await state.update_data(
                {"answer0": answer}
            )

            sleep(1)
            await message.answer('<b>üîª–í–æ–ø—Ä–æ—Å ‚Ññ2</b>\n\n'
                                 '–° –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞?')

            await Anketa.next()

        @dp.message_handler(state=Anketa.Q1)
        async def answer_q1(message: types.Message, state: FSMContext):
            answer = message.text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ variable

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            await state.update_data(
                {"answer1": answer}
            )
            sleep(1)
            await message.answer('<b>üîª–í–æ–ø—Ä–æ—Å ‚Ññ3</b>\n\n'
                                 '–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?')

            await Anketa.next()

        @dp.message_handler(state=Anketa.Q2)
        async def answer_q2(message: types.Message, state: FSMContext):
            answer2 = message.text

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            await state.update_data(
                {"answer2": answer2}
            )
            sleep(1)
            await message.answer("<b>üîª–í–æ–ø—Ä–æ—Å ‚Ññ4</b>\n\n"
                                 "–° –∫–∞–∫–æ–π –í—ã —à–∫–æ–ª—ã?(–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)")

            await Anketa.next()

        @dp.message_handler(state=Anketa.Q3)
        async def answer_q3(message : types.Message, state: FSMContext):
            answer3 = message.text

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            await state.update_data(
                {"answer3": answer3}
            )
            sleep(1)
            await message.answer('<b>üîª–í–æ–ø—Ä–æ—Å ‚Ññ5</b>\n\n'
                                 '–í –∫–∞–∫–æ–º –í—ã –∫–ª–∞—Å—Å–µ?')

            await Anketa.next()

        @dp.message_handler(state=Anketa.Q4)
        async def answer_q4(message: types.Message, state: FSMContext):
            answer4 = message.text

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            await state.update_data(
                {"answer4": answer4}
            )
            sleep(1)
            await message.answer('<b>üîª–í–æ–ø—Ä–æ—Å ‚Ññ6</b>\n\n'
                                 '–î–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –≤—ã –∏—â–∏—Ç–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞?üßê\n'
                                 '–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –ø–æ–¥–≥—Ç–æ–≤–∫–∏ –∫ SAT, –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —ç—Å—Å–µ, –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ')

            await Anketa.next()

        @dp.message_handler(state=Anketa.Q5)
        async def answer_q5(message: types.Message, state: FSMContext):
            answer5 = message.text

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            await state.update_data(
                {"answer5": answer5}
            )
            sleep(1)
            await message.answer('<b>üîª–í–æ–ø—Ä–æ—Å ‚Ññ7</b>\n\n'
                                 '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ –ø—Ä–æ –í–∞—Å –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –í–∞—à –±—É–¥—É—â–∏–π —Ç–æ–≤–∞—Ä–∏—âüòâ\n'
                                 '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ: –∫–∞–∫–æ–π –í—ã –≤ –ø–ª–∞–Ω–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –æ–±—â–µ–Ω–∏—è. –ö–∞–∫–∏–µ —Ç–µ–º—ã –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?')

            await Anketa.next()

        @dp.message_handler(state=Anketa.Q6)
        async def answer_q6(message: types.Message, state: FSMContext):
            answer6 = message.text

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            await state.update_data(
                {"answer6": answer6}
            )
            sleep(1)
            await message.answer('<b>üîª–í–æ–ø—Ä–æ—Å ‚Ññ8</b>\n\n'
                                 '–ö–∞–∫–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à –±—É–¥—É—â–∏–π –Ω–∞–ø–∞—Ä–Ω–∏–∫?(–≤–æ–∑—Ä–∞—Å—Ç, —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –∏–Ω—Ç–µ—Ä–µ—Å—ã)')

            await Anketa.next()

        @dp.message_handler(state=Anketa.Q7)
        async def answer_q7(message: types.Message, state: FSMContext):
            answer7 = message.text

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            await state.update_data(
                {"answer7": answer7}
            )
            sleep(1)
            await message.answer('<b>üîª–í–æ–ø—Ä–æ—Å ‚Ññ9</b>\n\n'
                                 '–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç–æ—Ç —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —á–µ–ª–æ–≤–µ–∫üòÅ')

            await Anketa.next()

        @dp.message_handler(state=Anketa.Q8)
        async def answer_q8(message: types.Message, state: FSMContext):
            answer8 = message.text

            await state.update_data(
                {"answer8": answer8}
            )


            await state.reset_state(with_data=False)

            finish_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ', callback_data='readyready')
                    ],
                    [
                        InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æüîô', callback_data='nonono')
                    ]
                ]
                )
            await message.answer('–ì–æ—Ç–æ–≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=finish_markup)


        @dp.callback_query_handler(text_contains='readyready')
        async def yes_send(call : CallbackQuery):
            sleep(1)
            await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—Éüíö\n\n"
                                "–ö–æ–º–∞–Ω–¥–∞ <b>College hub</b> –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ—ë –∏ –≤—ã–ª–æ–∂–∏—Ç –≤ —Å—Ç–æ—Ä–∏—Å –≤ —Ç–µ—á–µ–Ω–∏–µ <b>—Å–µ–º–∏ –¥–Ω–µ–πüçÄ</b>\n\n"
                                      "<i>P.S. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ @shakeszka\n\n/start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</i>")

            data = await state.get_data()
            answer0 = data.get('answer0')
            answer1 = data.get("answer1")
            answer2 = data.get("answer2")
            answer3 = data.get("answer3")
            answer4 = data.get("answer4")
            answer5 = data.get("answer5")
            answer6 = data.get("answer6")
            answer7 = data.get("answer7")
            answer8 = data.get('answer8')

            sleep(5)
            await bot.send_message(chat_id = -1001302742821, text='<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∞(@{username}):</b>\n\n'
                                                            '<b>–ò–º—è: </b>{q0}\n\n'
                                                            '<b>–ì–æ—Ä–æ–¥: </b>{q1}\n\n'
                                                            '<b>–í–æ–∑–≤—Ä–∞—Å—Ç: </b>{q2}\n\n'
                                                            '<b>–®–∫–æ–ª–∞: </b>{q3}\n\n'
                                                            '<b>–ö–ª–∞—Å—Å: </b>{q4}\n\n'
                                                            '<b>–î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –Ω–∞–ø–∞—Ä–Ω–∏–∫: </b>{q5}\n\n'
                                                            '<b>–ß—Ç–æ –ø—Ä–æ –í–∞—Å –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –í–∞—à –±—É–¥—É—â–∏–π –Ω–∞–ø–∞—Ä–Ω–∏–∫: </b>{q6}\n\n'
                                                            '<b>–ö–∞–∫–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–∞—à –±—É–¥—É—â–∏–π –Ω–∞–ø–∞—Ä–Ω–∏–∫: </b>{q7}\n\n'
                                                                    '<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã: </b>{q8}'.format(
                username=user_name, q0 = answer0, q1=answer1, q2=answer2, q3=answer3, q4=answer4, q5=answer5,
                q6=answer6,q7=answer7, q8=answer8))
            await state.finish()


        @dp.callback_query_handler(text_contains='nonono')
        async def no_send(call : CallbackQuery):
            sleep(1)
            await call.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ)")
            await search(message)

@dp.message_handler(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
async def search_keyboard(message : types.Message):
    await search(message)


@dp.message_handler(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info_keyboard(message : types.Message):
    await info_bot(message)

@dp.message_handler(text='–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ')
async def start_keyboard(message : types.Message):
    await start_bot(message)












